@model Application.DTOs.LoginDTO

@{
    ViewData["Title"] = "Login";
    Layout = "_AccountLayout";
}

<style>
    .google-signin-container {
        display: grid;
        width: 100%; /* Ensure the container takes full width */
        justify-content: center; /* Center the button horizontally */
    }

    .google-signin-button {
        width: 100% !important; /* Make the button take full width */
        height: 50px !important; /* Adjust the height */
    }
</style>

<div class="account-container">
    <div class="login-form">
        <div class="text-center">
            <h2><span class="logo-p2">@Shared.Common.ApplicationName.AppName</span></h2>
        </div>
        <form asp-action="Login">
            <input type="hidden" asp-for="ReturnUrl" value="@ViewData["ReturnUrl"]" />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input type="password" asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group d-grid my">
                <input type="submit" value="Login" class="btn btn-primary" />
                <div id="buttonDiv"></div>
            </div>
            <div class="text-center">
                <p>Don't have an account? <a href="@Url.Action("Register", "Account")">Register</a></p>
            </div>
        </form>
    </div>
    <div class="background-content">
        <h2>Welcome Back!</h2>
        <p>Enter your personal details and start your journey with us.</p>
    </div>
</div>

@section scripts {
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script>
        function handleCredentialResponse(response) {
            const idToken = response.credential;
            // Call your backend to verify the ID token
            fetch('@Url.Action("google", "Account")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ idToken })
            })
                .then(response => response.json())
                .then(data => {
                    console.log('JWT token:', data.token);
                    // Save the token and use it to make authenticated requests to your API
                })
                .catch(error => console.error('Error:', error));
        }

        window.onload = function () {
            google.accounts.id.initialize({
                client_id: '933017194074-dp2kaj9jolvebu8u14uluqms0mibj9e2.apps.googleusercontent.com',
                callback: handleCredentialResponse
            });
            google.accounts.id.renderButton(
                document.getElementById('buttonDiv'),
                { theme: 'outline', size: 'large', width: '100%' } // customization options
            );
        };
    </script>
}