@inject StateHelper _statehelper
@{
    ViewData["Title"] = "Campaigns";
}

<div>
    <button class="btn btn-primary btn-relative-position" id="openModal">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
        </svg>
        Add Campaign
    </button>
    @if (!_statehelper.User().IsExpired)
    {
        <button class="btn ai-btn btn-relative-position">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-magic" viewBox="0 0 16 16">
                <path d="M9.5 2.672a.5.5 0 1 0 1 0V.843a.5.5 0 0 0-1 0zm4.5.035A.5.5 0 0 0 13.293 2L12 3.293a.5.5 0 1 0 .707.707zM7.293 4A.5.5 0 1 0 8 3.293L6.707 2A.5.5 0 0 0 6 2.707zm-.621 2.5a.5.5 0 1 0 0-1H4.843a.5.5 0 1 0 0 1zm8.485 0a.5.5 0 1 0 0-1h-1.829a.5.5 0 0 0 0 1zM13.293 10A.5.5 0 1 0 14 9.293L12.707 8a.5.5 0 1 0-.707.707zM9.5 11.157a.5.5 0 0 0 1 0V9.328a.5.5 0 0 0-1 0zm1.854-5.097a.5.5 0 0 0 0-.706l-.708-.708a.5.5 0 0 0-.707 0L8.646 5.94a.5.5 0 0 0 0 .707l.708.708a.5.5 0 0 0 .707 0l1.293-1.293Zm-3 3a.5.5 0 0 0 0-.706l-.708-.708a.5.5 0 0 0-.707 0L.646 13.94a.5.5 0 0 0 0 .707l.708.708a.5.5 0 0 0 .707 0z" />
            </svg>
            Use AI Campaign
        </button>
    }
    else
    {
        <button class="btn ai-btn btn-relative-position cursor-not-allowed" disabled>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-magic" viewBox="0 0 16 16">
                <path d="M9.5 2.672a.5.5 0 1 0 1 0V.843a.5.5 0 0 0-1 0zm4.5.035A.5.5 0 0 0 13.293 2L12 3.293a.5.5 0 1 0 .707.707zM7.293 4A.5.5 0 1 0 8 3.293L6.707 2A.5.5 0 0 0 6 2.707zm-.621 2.5a.5.5 0 1 0 0-1H4.843a.5.5 0 1 0 0 1zm8.485 0a.5.5 0 1 0 0-1h-1.829a.5.5 0 0 0 0 1zM13.293 10A.5.5 0 1 0 14 9.293L12.707 8a.5.5 0 1 0-.707.707zM9.5 11.157a.5.5 0 0 0 1 0V9.328a.5.5 0 0 0-1 0zm1.854-5.097a.5.5 0 0 0 0-.706l-.708-.708a.5.5 0 0 0-.707 0L8.646 5.94a.5.5 0 0 0 0 .707l.708.708a.5.5 0 0 0 .707 0l1.293-1.293Zm-3 3a.5.5 0 0 0 0-.706l-.708-.708a.5.5 0 0 0-.707 0L.646 13.94a.5.5 0 0 0 0 .707l.708.708a.5.5 0 0 0 .707 0z" />
            </svg>
            Use AI Campaign
        </button>
    }
    <div id="wrapper"></div>
</div>

<div id="modaal-content" style="display: none;">
    <div class="text-center">
        <h3>Campaigns</h3>
    </div>
    <form id="campaignForm">
        <input id="compaign_id" hidden />
        <div class="form-group">
            <label>Title</label>
            <input class="form-control" id="compaign_name" name="compaign_name" required placeholder="e.g. Empower" />
        </div>
        <div class="form-group">
            <label>Content</label>
            <textarea class="form-control" id="compaign_content" name="compaign_content" required placeholder=""></textarea>
        </div>
        <div class="form-group">
            <label>Group By</label>
            <select id="group-slim-select" multiple>
                <option data-placeholder="true"></option>
            </select>
        </div>
        <div class="form-group d-grid my-2">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </form>
</div>
@section scripts {
    <script>
        let grid = {}
        let reload = true
        let slimSelectInstance;

        $(document).ready(() => {
            const validation = new window.JustValidate('#campaignForm');

            validation
                .addField('#compaign_name', [
                    {
                        rule: 'required',
                        errorMessage: 'Name is required',
                    }
                ])
                .addField('#compaign_content', [
                    {
                        rule: 'required',
                        errorMessage: 'Content is required',
                    }
                ])
                .onSuccess((event) => {
                    event.preventDefault();
                    loading("show")
                    const compaign_group = slimSelectInstance.selected();
                    if ($("#compaign_id").val()) {
                        const data = { id: $("#customer_id").val(), name: $("#compaign_name").val(), content: $("#compaign_content").val(), groups: compaign_group };
                        request('@Url.Action("Put", "Campaign")', 'PUT', data)
                            .then(data => {

                                grid.forceRender()
                                $('#openModal').modaal('close');
                                loading("hide")
                                if (data.status)
                                    alertify.success(data.message);
                                else
                                    alertify.error(data.message);

                            })
                            .catch(error => console.error(error));
                    }
                    else {
                        const data = { name: $("#compaign_name").val(), content: $("#compaign_content").val(), groups: compaign_group };
                        request('@Url.Action("Post", "Campaign")', 'POST', data)
                            .then(data => {
                                grid.forceRender()
                                $('#openModal').modaal('close');
                                loading("hide")
                                if (data.status)
                                    alertify.success(data.message);
                                else
                                    alertify.error(data.message);
                            })
                            .catch(error => console.error(error));
                    }
                });


            $('#openModal').modaal({
                content_source: '#modaal-content',
                after_close: function () {
                    $("#campaignForm").trigger("reset")
                    slimSelectInstance.set([]);
                },
                before_open: function () {
                    renderDropdown()
                }
            });

            grid = new gridjs.Grid({
                columns: ["Title", "Content", "Group(s)", "Action"],
                server: {
                    url: '@Url.Action("Get", "Campaign")',
                    then: data => data.data.item.map(res => {
                        return [
                            res.name,
                            res.content,
                            gridjs.html(res.groups.map(item => `<span class="custom-badge" id="${item.id}">${item.name}</span>`).join('')),
                            gridjs.html(`<div>
                                                                            <a class="custom-btn" onclick="confirmDelete(${res.id})">
                                                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                                                                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                                                                                </svg>
                                                                            </a>
                                                                                            <a class="custom-btn" onclick="openEditModal(${res.id}, '${res.name}', '${res.content}',  ${JSON.stringify(res.groups).replace(/'/g, "&apos;").replace(/"/g, "&quot;")})">
                                                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                                                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                                                                                </svg>
                                                                            </a>
                                                                        </div>`)
                        ];
                    }),
                    total: data => data.data.totalCount
                },
                search: {
                    server: {
                        url: (prev, keyword) => {
                            return `${prev}?search=${keyword}`
                        },
                        debounceTimeout: 2000
                    }
                },
                pagination: {
                    limit: 5,
                    summary: false,
                    // resetPageOnUpdate: true,
                    server: {
                        url: (prev, page, limit) => {
                            return `${prev}${prev.includes("?") ? "&" : "?"}pageNo=${page + 1}&pageSize=${limit}`;
                        }
                    }
                }
            });

            grid.render(document.getElementById("wrapper"));
        });

        const deleteitem = (id) => {
            loading("show")
            request(`@Url.Action("Delete", "Campaign")?id=${id}`, 'DELETE')
                .then(data => {
                    grid.forceRender()
                    loading("hide")
                    alertify.success(data.message);
                })
                .catch(error => console.error(error));
        }

        const confirmDelete = (id) => {
            alertify.confirm('', 'Are you sure, you want to delete?', function () { deleteitem(id) }
                , function () { })
        }

        function openEditModal(id, name, content, groups) {
            renderDropdown(groups)
            $("#compaign_id").val(id)
            $("#compaign_name").val(name)
            $("#compaign_content").val(content)
            $('#openModal').modaal('open');
        }


        const renderDropdown = async (data) => {
            if (reload) {
                loading("show");
                try {
                    const response = await request("@Url.Action("GetDropdown", "Group")", "GET");
                    const formattedData = response.data.map(item => ({
                        text: item.text,
                        value: item.value
                    }));

                    slimSelectInstance = new SlimSelect({
                        select: '#group-slim-select',
                        data: formattedData,
                        settings: {
                            placeholderText: 'Select Group(s)',
                        }
                    });

                    reload = false;
                    loading("hide");
                } catch (error) {
                    console.error('Error fetching data:', error);
                    loading("hide");
                    return;
                }
            }

            if (data) {
                slimSelectInstance.set(data.map(item => item.id));
            }
        }
    </script>
}