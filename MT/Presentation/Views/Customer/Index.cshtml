@{
    ViewData["Title"] = "Customers";
}

<div>
    <button class="btn btn-primary btn-relative-position" id="openModal">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
        </svg>
        Add Customer
    </button>
    <button class="btn btn-primary btn-relative-position" id="openImportModal">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filetype-csv" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5zM3.517 14.841a1.13 1.13 0 0 0 .401.823q.195.162.478.252.284.091.665.091.507 0 .859-.158.354-.158.539-.44.187-.284.187-.656 0-.336-.134-.56a1 1 0 0 0-.375-.357 2 2 0 0 0-.566-.21l-.621-.144a1 1 0 0 1-.404-.176.37.37 0 0 1-.144-.299q0-.234.185-.384.188-.152.512-.152.214 0 .37.068a.6.6 0 0 1 .246.181.56.56 0 0 1 .12.258h.75a1.1 1.1 0 0 0-.2-.566 1.2 1.2 0 0 0-.5-.41 1.8 1.8 0 0 0-.78-.152q-.439 0-.776.15-.337.149-.527.421-.19.273-.19.639 0 .302.122.524.124.223.352.367.228.143.539.213l.618.144q.31.073.463.193a.39.39 0 0 1 .152.326.5.5 0 0 1-.085.29.56.56 0 0 1-.255.193q-.167.07-.413.07-.175 0-.32-.04a.8.8 0 0 1-.248-.115.58.58 0 0 1-.255-.384zM.806 13.693q0-.373.102-.633a.87.87 0 0 1 .302-.399.8.8 0 0 1 .475-.137q.225 0 .398.097a.7.7 0 0 1 .272.26.85.85 0 0 1 .12.381h.765v-.072a1.33 1.33 0 0 0-.466-.964 1.4 1.4 0 0 0-.489-.272 1.8 1.8 0 0 0-.606-.097q-.534 0-.911.223-.375.222-.572.632-.195.41-.196.979v.498q0 .568.193.976.197.407.572.626.375.217.914.217.439 0 .785-.164t.55-.454a1.27 1.27 0 0 0 .226-.674v-.076h-.764a.8.8 0 0 1-.118.363.7.7 0 0 1-.272.25.9.9 0 0 1-.401.087.85.85 0 0 1-.478-.132.83.83 0 0 1-.299-.392 1.7 1.7 0 0 1-.102-.627zm8.239 2.238h-.953l-1.338-3.999h.917l.896 3.138h.038l.888-3.138h.879z" />
        </svg>
        Import
    </button>
    <div id="wrapper"></div>
</div>

<div id="modaal-content" style="display: none;">
    <div class="text-center">
        <h3>Customers</h3>
    </div>
    <form id="customerForm">
        <input id="customer_id" hidden />
        <div class="form-group my">
            <label>Name</label>
            <input class="form-control" id="customer_name" name="customer_name" required placeholder="e.g. John Doe" />
        </div>
        <div class="form-group my">
            <label>Email</label>
            <input class="form-control" id="customer_email" name="customer_email" required placeholder="e.g. john@mail.com" />
        </div>
        <div class="form-group my">
            <label>Phone</label>
            <input class="form-control" id="customer_phone" name="customer_phone" required placeholder="e.g. 03001234567" />
        </div>
        <div class="form-group my">
            <label>Group By</label>
            <select id="group-slim-select" multiple>
                <option data-placeholder="true"></option>
            </select>
        </div>
        <div class="form-group d-grid my">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </form>
</div>

<div id="import-modaal-content" style="display: none;">
    <div class="text-center">
        <h3>Import Customers</h3>
    </div>
    <form id="importcustomerForm" enctype="multipart/form-data">
        <div class="form-group my">
            <label for="file_name">Upload CSV File</label>
            <input type="file" class="form-control" id="file_name" name="file" accept=".csv" required />
        </div>
        <div class="form-group d-grid my">
            <input type="submit" value="Import" class="btn btn-primary" />
        </div>
    </form>
</div>
@section scripts {
    <script>
        let grid = {}
        let reload = true
        let slimSelectInstance;

        $(document).ready(() => {
            const validation = new window.JustValidate('#customerForm');
            const importformValidation = new window.JustValidate('#importcustomerForm');

            validation
                .addField('#customer_name', [
                    {
                        rule: 'required',
                        errorMessage: 'Name is required',
                    }
                ])
                .addField('#customer_email', [
                    {
                        rule: 'required',
                        errorMessage: 'Email is required',
                    }
                ])
                .addField('#customer_phone', [
                    {
                        rule: 'required',
                        errorMessage: 'Phone no is required(s)'
                    }
                ])
                .addField('#group-slim-select', [
                    {
                        rule: 'required',
                        errorMessage: 'Please select group(s)'
                    }
                ])

                .onSuccess((event) => {
                    event.preventDefault();
                    loading("show")
                    const customer_group = slimSelectInstance.selected();
                    if ($("#customer_id").val()) {
                        const data = { id: $("#customer_id").val(), name: $("#customer_name").val(), email: $("#customer_email").val(), phone: $("#customer_phone").val(), groups: customer_group };
                        request('@Url.Action("Put", "Customer")', 'PUT', data)
                            .then(data => {

                                grid.forceRender()
                                $('#openModal').modaal('close');
                                loading("hide")
                                if (data.status)
                                    alertify.success(data.message);
                                else
                                    alertify.error(data.message);

                            })
                            .catch(error => console.error(error));
                    }
                    else {
                        const data = { name: $("#customer_name").val(), email: $("#customer_email").val(), phone: $("#customer_phone").val(), groups: customer_group };
                        request('@Url.Action("Post", "Customer")', 'POST', data)
                            .then(data => {
                                grid.forceRender()
                                $('#openModal').modaal('close');
                                loading("hide")
                                if (data.status)
                                    alertify.success(data.message);
                                else
                                    alertify.error(data.message);
                            })
                            .catch(error => console.error(error));
                    }
                });

            importformValidation
                .addField('#file_name', [
                    {
                        rule: 'minFilesCount',
                        value: 1,
                        errorMessage: 'File is required',
                    },
                    {
                        rule: 'files',
                        value: {
                            files: {
                                extensions: ['csv'],
                            },
                        },
                        errorMessage: 'Only CSV files are allowed',
                    }
                ])
                .onSuccess((event) => {
                    event.preventDefault();
                    loading("show")
                    var formData = new FormData(document.getElementById('importcustomerForm'));
                    fetch('/Customer/BulkPost', { 
                        method: 'POST', 
                        body: formData
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            grid.forceRender()
                            $('#openImportModal').modaal('close');
                            loading("hide")
                            if (data.status)
                                alertify.success(data.message);
                            else
                                alertify.error(data.message);
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while importing customers.');
                        });
                });

            $('#openModal').modaal({
                content_source: '#modaal-content',
                after_close: function () {
                    $("#customerForm").trigger("reset");
                    slimSelectInstance.set([]);
                },
                before_open: function () {
                    renderDropdown();
                }
            });

            $('#openImportModal').modaal({
                content_source: '#import-modaal-content',
                after_close: function () {
                },
                before_open: function () {
                }
            });

            grid = new gridjs.Grid({
                columns: ["Name", "Email", "Phone", "Group(s)", "Action"],
                server: {
                    url: '@Url.Action("Get", "Customer")',
                    then: data => data.data.item.map(res => {
                        return [
                            res.name,
                            res.email,
                            res.phone,
                            gridjs.html(res.groups.map(item => `<span class="custom-badge" id="${item.id}">${item.name}</span>`).join('')),
                            gridjs.html(`<div>
                                                                    <a class="custom-btn" onclick="confirmDelete(${res.id})">
                                                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                                                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                                                                        </svg>
                                                                    </a>
                                                                                    <a class="custom-btn" onclick="openEditModal(${res.id}, '${res.name}', '${res.email}', '${res.phone}' , ${JSON.stringify(res.groups).replace(/'/g, "&apos;").replace(/"/g, "&quot;")})">
                                                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                                                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                                                                        </svg>
                                                                    </a>
                                                                </div>`)
                        ];
                    }),
                    total: data => data.data.totalCount
                },
                search: {
                    server: {
                        url: (prev, keyword) => {
                            return `${prev}?search=${keyword}`
                        },
                        debounceTimeout: 2000
                    }
                },
                pagination: {
                    limit: 5,
                    summary: false,
                    // resetPageOnUpdate: true,
                    server: {
                        url: (prev, page, limit) => {
                            return `${prev}${prev.includes("?") ? "&" : "?"}pageNo=${page + 1}&pageSize=${limit}`;
                        }
                    }
                }
            });

            grid.render(document.getElementById("wrapper"));
        });

        const deleteitem = (id) => {
            loading("show")
            request(`@Url.Action("Delete", "Customer")?id=${id}`, 'DELETE')
                .then(data => {
                    grid.forceRender()
                    loading("hide")
                    alertify.success(data.message);
                })
                .catch(error => console.error(error));
        }

        const confirmDelete = (id) => {
            alertify.confirm('', 'Are you sure, you want to delete?', function () { deleteitem(id) }
                , function () { })
        }

        function openEditModal(id, name, email, phone, groups) {
            renderDropdown(groups)
            $("#customer_id").val(id)
            $("#customer_name").val(name)
            $("#customer_email").val(email)
            $("#customer_phone").val(phone)
            $('#openModal').modaal('open');
        }


        const renderDropdown = async (data) => {
            if (reload) {
                loading("show");
                try {
                    const response = await request("@Url.Action("GetDropdown", "Group")", "GET");
                    const formattedData = response.data.map(item => ({
                        text: item.text,
                        value: item.value
                    }));

                    slimSelectInstance = new SlimSelect({
                        select: '#group-slim-select',
                        data: formattedData,
                        settings: {
                            placeholderText: 'Select Group(s)',
                        }
                    });

                    reload = false;
                    loading("hide");
                } catch (error) {
                    console.error('Error fetching data:', error);
                    loading("hide");
                    return;
                }
            }

            if (data) {
                slimSelectInstance.set(data.map(item => item.id));
            }
        }

    </script>
}